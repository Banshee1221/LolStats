"""
.. module:: parser
   :platform: Windows
   :synopsis: reader.py is used to read data from the directory of a LoL player generated by store.py and pass them
   through to be parsed for specific purposes later.

.. moduleauthor:: Eugene de Beste <banshee1221@gmail.com>

How To Use This Module
======================
(See the individual class, functions and attributes for details.)

1. Import the module: ``import parser``.
   You will also need to ``import json``.

2. Create a ReadPlayer object.
   Initiate it with the ID of the player that data needs to be pulled from, e.g. ``ReadPlayer(512231)``

3. Call the functions of the ReadPlayer object normally.

"""

# Imports

import os
import glob
import json

class ReadPlayer:
    """
    ReadPlayer is the main class that encapsulates all the features of this script. A player ID is used to be able to
    get data for that respective player.
    :var loc: The location on the filesystem of the script when it is run. It is used to keep track of which files in
    which directories need to be read.
    :var playerId: The ID for the player of which data is being read.
    """

    loc = os.getcwd()
    playerId = 0

    def __init__(self, playerId):
        """
        Initialisation function. It sets the player ID variable to be used later by other functions, as well as change
        the directory to the appropriate player.
        :param playerId: The ID for the player of which data is being read.
        :return: None
        """

        os.chdir(self.loc+"/static/json/"+str(playerId))
        self.playerId = playerId

    def getPlayerData(self):
        """
        Produces a list of all the data on the player.
        :return: Dictionary containing the data on the player such as name, ID, etc.
        """

        os.chdir(self.loc)
        return dict(json.load(open("_playerData.json", "r")))

    def getPlayerHist(self):
        """
        Produces a list of all the history belonging to a player ID.
        :return: Either a single dictionary containing the last 10 games of a player, or an array of dictionaries if the
        player has more data than the most recent 10 games.
        """

        amount = glob.glob("_playerHist*")
        temp = []
        if len(amount) > 1:
            for items in amount:
                temp.append(dict(json.load(open(items, "r"))))
            os.chdir(self.loc)
            return temp
        else:
            os.chdir(self.loc)
            return dict(json.load(open(amount[0], "r")))

    def getAllPlayerMatches(self):
        """
        Produces a list of all the matches that a player has data for.
        :return: Either a single dictionary containing data for one match, or an array of multiple dictionaries to
        represent each match.
        """

        os.chdir(self.loc+"/static/json/"+str(self.playerId)+"/matchData")
        amount = glob.glob("*")
        temp = []
        if len(amount) > 1:
            for items in amount:
                temp.append(dict(json.load(open(items, "r"))))
            os.chdir(self.loc)
            return temp
        else:
            os.chdir(self.loc)
            return dict(json.load(open(amount[0], "r")))

    def getOneMatch(self, matchId):
        """
        Produces a list of data pertaining to a specified match.
        :param matchId: The ID for the match that data needs to be pulled of.
        :return: A dictionary of data pertaining to the specified match
        """
        os.chdir(self.loc+"/static/json/"+str(self.playerId)+"/matchData")
        return dict(json.load(open(str(matchId)+".json", "r")))


#test = ParsePlayer(60783)
#print test.getAllPlayerMatches()